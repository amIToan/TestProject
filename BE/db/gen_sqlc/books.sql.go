// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: books.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBook = `-- name: CreateBook :one
INSERT INTO
  books (
    title,
    description,
    image_links,
    price,
    publication_date,
    author_id
  )
VALUES
  ($1, $2, $3, $4, $5, $6) RETURNING book_id, title, description, image_links, price, publication_date, author_id
`

type CreateBookParams struct {
	Title           string         `json:"title"`
	Description     string         `json:"description"`
	ImageLinks      []string       `json:"image_links"`
	Price           pgtype.Numeric `json:"price"`
	PublicationDate pgtype.Date    `json:"publication_date"`
	AuthorID        int64          `json:"author_id"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRow(ctx, createBook,
		arg.Title,
		arg.Description,
		arg.ImageLinks,
		arg.Price,
		arg.PublicationDate,
		arg.AuthorID,
	)
	var i Book
	err := row.Scan(
		&i.BookID,
		&i.Title,
		&i.Description,
		&i.ImageLinks,
		&i.Price,
		&i.PublicationDate,
		&i.AuthorID,
	)
	return i, err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM
  books
WHERE
  book_id = $1
`

func (q *Queries) DeleteBook(ctx context.Context, bookID int64) error {
	_, err := q.db.Exec(ctx, deleteBook, bookID)
	return err
}

const deleteManyBooks = `-- name: DeleteManyBooks :exec
DELETE FROM
  books
WHERE
  book_id = ANY($1::int[])
`

func (q *Queries) DeleteManyBooks(ctx context.Context, dollar_1 []int32) error {
	_, err := q.db.Exec(ctx, deleteManyBooks, dollar_1)
	return err
}

const getBookById = `-- name: GetBookById :one
SELECT
  b.book_id, b.title, b.description, b.image_links, b.price, b.publication_date, b.author_id,
  (A.first_name || ' ' || A.last_name) as author_name
from
  books AS B
  INNER JOIN authors AS A on B.author_id = A.id
WHERE
  book_id = $1
`

type GetBookByIdRow struct {
	BookID          int64          `json:"book_id"`
	Title           string         `json:"title"`
	Description     string         `json:"description"`
	ImageLinks      []string       `json:"image_links"`
	Price           pgtype.Numeric `json:"price"`
	PublicationDate pgtype.Date    `json:"publication_date"`
	AuthorID        int64          `json:"author_id"`
	AuthorName      interface{}    `json:"author_name"`
}

func (q *Queries) GetBookById(ctx context.Context, bookID int64) (GetBookByIdRow, error) {
	row := q.db.QueryRow(ctx, getBookById, bookID)
	var i GetBookByIdRow
	err := row.Scan(
		&i.BookID,
		&i.Title,
		&i.Description,
		&i.ImageLinks,
		&i.Price,
		&i.PublicationDate,
		&i.AuthorID,
		&i.AuthorName,
	)
	return i, err
}

const getBookLists = `-- name: GetBookLists :many
SELECT
  b.book_id, b.title, b.description, b.image_links, b.price, b.publication_date, b.author_id,
 (A.first_name || ' ' || A.last_name) as author_name
FROM
  books AS B
  INNER JOIN authors AS A on B.author_id = A.id
ORDER BY
  publication_date
LIMIT 100
`

type GetBookListsRow struct {
	BookID          int64          `json:"book_id"`
	Title           string         `json:"title"`
	Description     string         `json:"description"`
	ImageLinks      []string       `json:"image_links"`
	Price           pgtype.Numeric `json:"price"`
	PublicationDate pgtype.Date    `json:"publication_date"`
	AuthorID        int64          `json:"author_id"`
	AuthorName      interface{}    `json:"author_name"`
}

func (q *Queries) GetBookLists(ctx context.Context) ([]GetBookListsRow, error) {
	rows, err := q.db.Query(ctx, getBookLists)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetBookListsRow{}
	for rows.Next() {
		var i GetBookListsRow
		if err := rows.Scan(
			&i.BookID,
			&i.Title,
			&i.Description,
			&i.ImageLinks,
			&i.Price,
			&i.PublicationDate,
			&i.AuthorID,
			&i.AuthorName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBooksByTitle = `-- name: GetBooksByTitle :many
SELECT
  book_id, title, description, image_links, price, publication_date, author_id
FROM
  books
WHERE
  title LIKE '%' || $1 || '%'
`

func (q *Queries) GetBooksByTitle(ctx context.Context, bookTitle pgtype.Text) ([]Book, error) {
	rows, err := q.db.Query(ctx, getBooksByTitle, bookTitle)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Book{}
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.BookID,
			&i.Title,
			&i.Description,
			&i.ImageLinks,
			&i.Price,
			&i.PublicationDate,
			&i.AuthorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBookById = `-- name: UpdateBookById :one
UPDATE
  books
SET
  title = COALESCE($1, title),
  description = COALESCE($2, description),
  image_links = COALESCE($3, image_links),
  price = COALESCE($4, price),
  publication_date = COALESCE($5, publication_date),
  author_id = COALESCE($6, author_id)
WHERE
  book_id = $7 RETURNING book_id, title, description, image_links, price, publication_date, author_id
`

type UpdateBookByIdParams struct {
	Title           pgtype.Text    `json:"title"`
	Description     pgtype.Text    `json:"description"`
	ImageLinks      []string       `json:"image_links"`
	Price           pgtype.Numeric `json:"price"`
	PublicationDate pgtype.Date    `json:"publication_date"`
	AuthorID        pgtype.Int8    `json:"author_id"`
	BookID          int64          `json:"book_id"`
}

func (q *Queries) UpdateBookById(ctx context.Context, arg UpdateBookByIdParams) (Book, error) {
	row := q.db.QueryRow(ctx, updateBookById,
		arg.Title,
		arg.Description,
		arg.ImageLinks,
		arg.Price,
		arg.PublicationDate,
		arg.AuthorID,
		arg.BookID,
	)
	var i Book
	err := row.Scan(
		&i.BookID,
		&i.Title,
		&i.Description,
		&i.ImageLinks,
		&i.Price,
		&i.PublicationDate,
		&i.AuthorID,
	)
	return i, err
}
