// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: genres.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGenre = `-- name: CreateGenre :one
INSERT INTO genres (
    name
) VALUES (
    $1
) RETURNING genre_id, name
`

func (q *Queries) CreateGenre(ctx context.Context, name string) (Genre, error) {
	row := q.db.QueryRow(ctx, createGenre, name)
	var i Genre
	err := row.Scan(&i.GenreID, &i.Name)
	return i, err
}

const deleteGenre = `-- name: DeleteGenre :exec
DELETE FROM genres WHERE genre_id = $1
`

func (q *Queries) DeleteGenre(ctx context.Context, genreID int64) error {
	_, err := q.db.Exec(ctx, deleteGenre, genreID)
	return err
}

const getGenreByNames = `-- name: GetGenreByNames :many
SELECT genre_id, name FROM genres
WHERE name LIKE ('%' || $1 || '%')
`

func (q *Queries) GetGenreByNames(ctx context.Context, name pgtype.Text) ([]Genre, error) {
	rows, err := q.db.Query(ctx, getGenreByNames, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Genre{}
	for rows.Next() {
		var i Genre
		if err := rows.Scan(&i.GenreID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGenres = `-- name: GetGenres :many
SELECT genre_id, name FROM genres LIMIT 50
`

func (q *Queries) GetGenres(ctx context.Context) ([]Genre, error) {
	rows, err := q.db.Query(ctx, getGenres)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Genre{}
	for rows.Next() {
		var i Genre
		if err := rows.Scan(&i.GenreID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGenre = `-- name: UpdateGenre :one
UPDATE genres
SET
  name = $2
WHERE
  genre_id = $1
RETURNING genre_id, name
`

type UpdateGenreParams struct {
	GenreID int64  `json:"genre_id"`
	Name    string `json:"name"`
}

func (q *Queries) UpdateGenre(ctx context.Context, arg UpdateGenreParams) (Genre, error) {
	row := q.db.QueryRow(ctx, updateGenre, arg.GenreID, arg.Name)
	var i Genre
	err := row.Scan(&i.GenreID, &i.Name)
	return i, err
}
