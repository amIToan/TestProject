// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: authors.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO authors (
    first_name,
    last_name, 
    dob, 
    email,
    gender
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, first_name, last_name, dob, email, gender
`

type CreateAuthorParams struct {
	FirstName string      `json:"first_name"`
	LastName  string      `json:"last_name"`
	Dob       pgtype.Date `json:"dob"`
	Email     string      `json:"email"`
	Gender    string      `json:"gender"`
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (Author, error) {
	row := q.db.QueryRow(ctx, createAuthor,
		arg.FirstName,
		arg.LastName,
		arg.Dob,
		arg.Email,
		arg.Gender,
	)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Dob,
		&i.Email,
		&i.Gender,
	)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM authors where id=$1
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAuthor, id)
	return err
}

const getAuthorsByNames = `-- name: GetAuthorsByNames :many
SELECT id, first_name, last_name, dob, email, gender FROM authors
WHERE CONCAT(first_name, ' ', last_name) LIKE '%' || $1 || '%'
`

func (q *Queries) GetAuthorsByNames(ctx context.Context, authorsName pgtype.Text) ([]Author, error) {
	rows, err := q.db.Query(ctx, getAuthorsByNames, authorsName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Author{}
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Dob,
			&i.Email,
			&i.Gender,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFirstFiftyOfAuthors = `-- name: GetFirstFiftyOfAuthors :many
SELECT id, first_name, last_name, dob, email, gender FROM authors LIMIT 50
`

func (q *Queries) GetFirstFiftyOfAuthors(ctx context.Context) ([]Author, error) {
	rows, err := q.db.Query(ctx, getFirstFiftyOfAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Author{}
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Dob,
			&i.Email,
			&i.Gender,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAuthor = `-- name: UpdateAuthor :one
UPDATE authors
SET
  first_name = COALESCE($1, first_name),
  last_name = COALESCE($2, last_name),
  dob = COALESCE($3, dob),
  email = COALESCE($4, email),
  gender = COALESCE($5, gender)
WHERE
  id = $6
RETURNING id, first_name, last_name, dob, email, gender
`

type UpdateAuthorParams struct {
	FirstName pgtype.Text `json:"first_name"`
	LastName  pgtype.Text `json:"last_name"`
	Dob       pgtype.Date `json:"dob"`
	Email     pgtype.Text `json:"email"`
	Gender    pgtype.Text `json:"gender"`
	ID        int64       `json:"id"`
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) (Author, error) {
	row := q.db.QueryRow(ctx, updateAuthor,
		arg.FirstName,
		arg.LastName,
		arg.Dob,
		arg.Email,
		arg.Gender,
		arg.ID,
	)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Dob,
		&i.Email,
		&i.Gender,
	)
	return i, err
}
