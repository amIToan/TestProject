// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username,
  hashed_password,
  email, 
  role
) VALUES (
  $1, $2, $3, $4
) RETURNING username, hashed_password, email, role, password_changed_at, created_at
`

type CreateUserParams struct {
	Username       string      `json:"username"`
	HashedPassword string      `json:"hashed_password"`
	Email          string      `json:"email"`
	Role           pgtype.Text `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.Email,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.Role,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT username, hashed_password, email, role, password_changed_at, created_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.Role,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
  hashed_password = COALESCE($1, hashed_password),
  email = COALESCE($2, email)
WHERE
  username = $3
RETURNING username, hashed_password, email, role, password_changed_at, created_at
`

type UpdateUserParams struct {
	HashedPassword pgtype.Text `json:"hashed_password"`
	Email          pgtype.Text `json:"email"`
	Username       string      `json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.HashedPassword, arg.Email, arg.Username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.Role,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
